<div class="card max-w-2xl mx-auto">
    <h1>Image average color finder</h1>

    <div class="flex items-center justify-center w-full mt-4" id="fileDragZone">
        <label for="imageInput" class="flex flex-col items-center justify-center w-full h-44 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-50 dark:hover:bg-bray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600">
            <div class="flex flex-col items-center justify-center pt-5 pb-6">
                <svg aria-hidden="true" class="w-10 h-10 mb-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path></svg>
                <p class="mb-2 text-sm text-gray-500 dark:text-gray-400"><span class="font-semibold">Click to upload</span> or drag and drop</p>
                <p class="text-xs text-gray-500 dark:text-gray-400">PNG, JPG</p>
            </div>
            <input id="imageInput" type="file" class="hidden" accept="image/*"/>
        </label>
    </div> 

    <div class="w-full aspect-video bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-600 mt-4 rounded-lg p-4" id="imagePreview"></div>

    <div id="colors"></div>

</div>

<script>
    const imageInput = document.querySelector("#imageInput");
    const dropZoneElement = document.getElementById("fileDragZone");
    const imagePreview = document.querySelector("#imagePreview");
    const colorsDiv = document.querySelector("#colors");

    imageInput.addEventListener("change", (e) => {
        if (imageInput.files.length) end(imageInput.files[0]);
    });
    dropZoneElement.addEventListener("dragover", (e) => {
        e.preventDefault();
    });
    dropZoneElement.addEventListener("drop", (e) => {
        e.preventDefault();
        if (e.dataTransfer.files.length) {
            imageInput.files = e.dataTransfer.files;
            end(e.dataTransfer.files[0]);
        }
    });
    function end(file) {
        if (file.type.startsWith("image/")) {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => {
                imagePreview.innerHTML = `<img src="${reader.result}" id="imageToFindAverage"/>`;
                setTimeout(() => {getAverageRGB(reader.result)}, 300)
            };
        }
    }

    function getAverageRGB() {
        var blockSize = 5,
            defaultRGB = {r:0,g:0,b:0},
            canvas = document.createElement('canvas'),
            context = canvas.getContext && canvas.getContext('2d'),
            data, width, height,
            i = -4,
            length,
            rgb = {r:0,g:0,b:0},
            count = 0;
            
        if (!context) {
            return defaultRGB;
        }
        
        let imageToFindAverage = document.querySelector("#imageToFindAverage");

        height = canvas.height = imageToFindAverage.naturalHeight || imageToFindAverage.offsetHeight || imageToFindAverage.height;
        width = canvas.width = imageToFindAverage.naturalWidth || imageToFindAverage.offsetWidth || imageToFindAverage.width;
        
        context.drawImage(imageToFindAverage, 0, 0);
        
        try {
            data = context.getImageData(0, 0, width, height);
        } catch(e) {
            /* security error, img on diff domain */alert('x');
            return defaultRGB;
        }
        
        length = data.data.length;
        
        while ( (i += blockSize * 4) < length ) {
            ++count;
            rgb.r += data.data[i];
            rgb.g += data.data[i+1];
            rgb.b += data.data[i+2];
        }
        
        // ~~ used to floor values
        rgb.r = Math.floor(rgb.r/count);
        rgb.g = Math.floor(rgb.g/count);
        rgb.b = Math.floor(rgb.b/count);

        colorsDiv.innerHTML =`<div class="mt-4 flex flex-row gap-2 rounded-lg border border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-gray-900"><div class="md:h-28 md:w-56 h-20 w-40 rounded-l-lg" style="background-color: rgb(${rgb.r}, ${rgb.g}, ${rgb.b});"></div><div class="flex flex-col justify-center"><p>${rgbToHex(rgb)}</p><p>rgb(${rgb.r}, ${rgb.g}, ${rgb.b})</p><p>hsl(${RGBToHSL(rgb)})</p></div></div>`;
    }

    function componentToHex(c) {
        var hex = c.toString(16);
        return hex.length == 1 ? "0" + hex : hex;
    }

    function rgbToHex(rgb) {
        return "#" + componentToHex(rgb.r) + componentToHex(rgb.g) + componentToHex(rgb.b);
    }

    function RGBToHSL (rgb) {
        rgb.r /= 255;
        rgb.g /= 255;
        rgb.b /= 255;
        const l = Math.max(rgb.r, rgb.g, rgb.b);
        const s = l - Math.min(rgb.r, rgb.g, rgb.b);
        const h = s
            ? l === rgb.r
            ? (rgb.g - rgb.b) / s
            : l === rgb.g
            ? 2 + (rgb.b - rgb.r) / s
            : 4 + (rgb.r - rgb.g) / s
            : 0;
        return Math.round(60 * h < 0 ? 60 * h + 360 : 60 * h)+", "+ Math.round(100 * (s ? (l <= 0.5 ? s / (2 * l - s) : s / (2 - (2 * l - s))) : 0))+", "+Math.round((100 * (2 * l - s)) / 2)
    }
</script>